package driver;

import java.util.Arrays;
import java.util.HashMap;

/**
 * This class implements the list command - ls,
 * which allows the the contents of a directory to be outputted 
 * to the JShell. 
 * 
 * @author Dmitry, Waleed, Kamal, Priyen
 *
 */
public class CommandLs {
  
  /**
   * Shows the contents of a directory - may take in a full 
   * path or if no path is provided, it uses the current
   * working directory.
   * 
   * @param fs: The FileSystem which needs contents of a directory
   *    to be shown 
   * @param path: the path at which the directory is at
   */
  public static String CommandLs(FileSystem fs, String path, String[] flags)
  {
    if (path == null){
      if (Arrays.asList(flags).contains("-r"))
      {
        return listRecursively(fs, fs.getWorkingDirectory(), 
            fs.getWorkingDirectory().getName());
      }
      else
      {
        return  fs.getWorkingDirectory().listContents();
      }
    }
    else
    {
      if(fs.getFolderFromPath(path) != null)
      {
        if (Arrays.asList(flags).contains("-r"))
        {
          String s = fs.getFolderFromPath(path).getDir().replace
            (fs.getWorkingDirectory().getDir(), "");
          if (fs.getWorkingDirectory() == fs)
          { 
            s = fs.getFolderFromPath(path).getDir(); 
          }
          return listRecursively(fs, fs.getFolderFromPath(path), s);
        }
        else
        {
          return fs.getFolderFromPath(path).listContents();
        }
      }      
      else
      {
        // path does not exist
        System.err.println("ls: Invalid path provided: " + path);
        return "";
      }
   }
 }
  
  private static String listRecursively(FileSystem fs, Folder folder, 
      String master)
  {
    String content = folder.listContents();
    String listingDirectoryString = master;
    if (listingDirectoryString.equals("")) { listingDirectoryString = 
        folder.getName(); }
    content = listingDirectoryString + 
        ": \n" + content;
    HashMap<String, Object> folders = folder.getFolders();
    for(String key:folders.keySet())
    {
      Folder f = ((Folder) folders.get(key));
      if (f != null && f != folder)
      {
        String c = listRecursively(fs, f, master + "/" + f.getName());
        content = content + "\n\n" + c;
      }
    }
    return content.replace("//", "/");
  }
}
